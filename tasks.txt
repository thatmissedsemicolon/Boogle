*********************************

- resolve: clear input field after a word is submitted to allow for new word to be typed

private void handleWordSubmission(String currentWord) {
        // word submission logic *
        // call boggleBoard.validateWord(currentWord) and update the score
        // include boggle dictionary in tar file -- enforce command line argument rules
        // i.e. java BoggleGame.jar <dictionary>

        // Clear the input field after submitting a word
        inputField.setText("");
    }

*********************************

- add button to see rules

RULES: 
(from https://www.wordplays.com/boggle)
Boggle is a word game that requires 16 letter cubes similar to dice, but with letters. The Boggle grid has a dome so when you shake the game the dice are not lost and can easily fall into the grid. A sand timer accompanies the game, so players have 3 minutes to find as many words as possible. You must have a minimum of two players to play.

The goal of the game is to have the highest point total. To gain points, players must create words from the randomly assorted letters in the cube grid. The longer the word, the higher the point value of the word, according to Boggle rules.

Boggle is a game involving the creation of as many words as possible from special dice in a specified time limit, and involves two players or more.
- Boggle generally features sixteen cubes or dice that have a single letter on each face, with the exception of ‘Q’, which is combined with the letter ‘U’ as ‘Qu’; as well as a container and lid, designed to hold the dice in place.
- The typical aim of Boggle is to find words within the letter arrangements that sit next to each other on the dice, which are randomized each round by shaking the container.
- Each Boggle player writes the words they find on their own piece of paper, and they are read aloud when time is up, which is usually three minutes on the timer.
- Points are scored in Boggle according to the word length – generally those three to four letters in length score one point, with words eight or more letters in length scoring eleven points, while words found by multiple players are generally considered null and have a point value of zero.
- While each player reads the words they discovered, the other players check their lists for the same words, crossing them off if they match. The points are allocated to each player if they have a unique word.

*********************************
- Validate word submissions:
Each player records as many words as they can create from the letters that are adjoining horizontally, vertically, or diagonally
note: each letter cannot be used more than once within a single word

private void handleWordSubmission(String currentWord) {
        // word submission logic *
        // call boggleBoard.validateWord(currentWord) and update the score
        // include boggle dictionary in tar file -- enforce command line argument rules
        // i.e. java BoggleGame.jar <dictionary>

        // Clear the input field after submitting a word
        inputField.setText("");
    }

- implement validateWord function

private boolean validWord(String word) {

        // word validation logic based on Boggle rules
        return true; // (placeholder -- replace with actual implementation)
    }

*********************************

- implement scoring logic
    - check word validity
    - check word length
    - sum score

SCORING:

Number of letters: 3 | 4 | 5 | 6 | 7 | 8+
Points per word:   1 | 1 | 2 | 3 | 5 | 11

// word point calculation
private int calculateWordPoints(String word) {
        // calculate score *
        // validate words with dictionary -- to be done later *
        return word.length();
    }

// final score calculation
private int calculateFinalScore() {
        // calculate final score *
        // consider the number of valid words, word lengths, etc according to boggle
        // rules
        return 0; // (placeholder -- replace with actual implementation)
    }

*********************************

- Randomize Board Letters

Option: something like: char ch = (char) (new Random().nextInt('Z' -'A' + 1) + 'A')
or
Option: generate random number between 1-26 (corresponding to letters of the alphabet), switch statement (case 1: char boardletter = 'A', case 2: char boardletter = 'B', ..., case 26: char boardletter = 'Z')

current code:
// test board -- modify to randomize letters *
    private static final char[][] LETTERS = {
            { 'A', 'B', 'C', 'D' },
            { 'E', 'F', 'G', 'H' },
            { 'I', 'J', 'K', 'L' },
            { 'M', 'N', 'O', 'P' }
    };

// generate board -- modify to accomodate randomized letters *
    private void generateBoard(JLabel currentWordDisplay) {
        ...
    }

From https://web.stanford.edu/class/archive/cs/cs106b/cs106b.1172/assn/boggle.html
    Setting up the Game Board
The real Boggle game comes with sixteen letter cubes, each with particular letters on each of their six faces. 
The letters on each cube are not random; they were chosen in such a way that common letters come up more often and it is easier to get a good mix of vowels and consonants.
We want your Boggle game to match this. The following table lists all of the letters on all six faces of each of the sixteen cubes from the original Boggle. 
You should decide on an appropriate way to represent this information in your program and declare it accordingly.

AAEEGN  ABBJOO  ACHOPS  AFFKPS
AOOTTW  CIMOTU  DEILRX  DELRVY
DISTTY  EEGHNW  EEINSU  EHRTVW
EIOSST  ELRTTY  HIMNQU  HLNNRZ
At the beginning of each game, "shake" the board cubes. There are two different random aspects to consider:

A random location on the 4x4 game board should be chosen for each cube. (For example, the AAEEGN cube should not always appear in the top-left square of the board; it should randomly appear in one of the 16 available squares with equal probability.)
A random side from each cube should be chosen to be the face-up letter of that cube. (For example, the AAEEGN cube should not always show A; it should randomly show A 1/3 of the time, E 1/3 of the time, G 1/6 of the time, and N 1/6 of the time.)
The Stanford C++ libraries have a file shuffle.h with a shuffle function you can use to rearrange the elements of an array, Vector, or Grid. See shuffle.h if you are curious about how the shuffling algorithm works.

*********************************

in public class LetterClickListener extends MouseAdapter { ...}:
Revise the gui so that current word is displayed in a table
OR: remove this feature so that user writes their words down instead (still adheres to standard game conventions)
            // display the current word on the GUI
            currentWordDisplay.setText("Current Word: " + currentWord.toString());

*********************************

- currently, the player can select/click any letter on the board even if it does not create a valid word
- option is to error-check in-game so that user cannot click a letter that is not adjacent to last clicked letter so that user cannot submit a word formed with invalid letters, 
- or just check whether the letters in the word adhere to the game rules when checking the word (i.e. check that a letter is next to another in the array/table/map when validating the submitted word)

*********************************

- in BoggleGame.java: make sure that word is kept in list when "submit word" is clicked

*********************************

(optional) EXTRA FEATURE:
Rotate the letters on the board
